#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Getting Started}{getting-started}

Once you've got your Concourse all \reference{setting-up}{set up}, you'll want to
download the Fly CLI from your instance via the web UI.

\margin-note{
  If you're on Linux or OS X, you will have to \code{chmod +x} the downloaded
  binary and put it in your \code{$PATH}. This can be done in one fell swoop
  with \code{install $DEST path/to/fly}.
}

Once you have \code{fly}, you'll want to target your local Virtualbox like so:

\codeblock{bash}{
$ fly -t lite login -c http://192.168.100.4:8080
}

This will save the target as \code{lite}, which we'll use for all later
commands that we want to run against the local box by using the same \code{-t}
flag.

Out of the box, Concourse doesn't have any \reference{pipelines} configured.
That's boring. Here, have this YAML!

\codeblock{yaml}{
jobs:
- name: hello-world
  plan:
  - task: say-hello
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: \{repository: ubuntu\}
      run:
        path: echo
        args: ["Hello, world!"]
}

Dump that into a \code{.yml} file somewhere, and run this random command on
your machine:

\codeblock{bash}{
$ fly -t lite set-pipeline -p really-cool-pipeline -c somewhere.yml
}

If you refresh the \hyperlink{http://192.168.100.4:8080}{main page}, you should
now see the world's tiniest \reference{pipelines}{pipeline}!

Newly configured pipelines are paused by default, to prevent them from running
freely when you're not sure what they do yet. To unpause it, you can either
reveal the pipelines sidebar via the hamburger icon in the top left and press
"play", or run:

\codeblock{bash}{
$ fly -t lite unpause-pipeline -p really-cool-pipeline
}

You can always fetch the current configuration of a pipeline by running:

\codeblock{bash}{
$ fly -t lite get-pipeline -p really-cool-pipeline
}

This pipeline configuration so far describes a single \reference{jobs}{job},
whose \reference{build-plans}{\code{plan}} has a single
\reference{running-tasks}{task}. There are no resources for this job to
automatically trigger so we'll have to give it a helping hand. Click the job
and then press the plus button in the top right. The task boots up, prints
\code{Hello, world!}, and completes successfully.

Not very useful? Well, time to learn how to write your own. There are a few
ways to approach learning Concourse:

\list{
  \reference{concepts} - to learn a high-level picture of how Concourse thinks
  CI should work.
}{
  \reference{running-tasks} - to learn how a task works, by running them
  interactively with \reference{fly-execute}.
}{
  \reference{pipelines} - to learn how to continuously integrate resources
  and tasks together.
}
