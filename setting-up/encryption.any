#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Encryption}{encryption}

\warn{
  This topic isn't crucial to understanding Concourse; if you're just getting
  started and have finished the \reference{installing} section, you may want to
  first move on to \reference{using-concourse}.
}

Automating everything means authorizing something to automate many things. This
makes CI systems a high-risk target for security leaks.

Concourse pipelines are loaded with credentials: resources are configured with
private keys, tasks are given credentials to servers they integrate against via
\reference{task-params}, etc. etc. etc. If someone gets their hands on your
config, they have access to everything.

To mitigate this, Concourse supports encrypting sensitive information before it
reaches the database. This way the plaintext credentials only exist in memory
for as long as they need to, and if someone gains access to your database, they
can't so easily gain the keys to the kingdom.

We strongly encourage anyone running Concourse to configure encryption. In the
long run, Concourse shouldn't be storing these credentials in the first place,
which is the \reference{encryption-next-steps}{long term plan}, but encryption
will still be necessary in the future if not just to store the keys to a
credential manager once we support it.

\section{What's encrypted?}{
  The following values are expected to contain credentials, and so will be
  encrypted:

  \list{
    Resource \reference{source}s, as they often contain private keys and other
    credentials for writing to (or simply granting access to) the resource.
  }{
    Resource type \reference{resource-type-source}s, for the same reason as
    above, though this is probably a less common use case.
  }{
    Task step \reference{task-params}, as they are often used to configure
    access to e.g. an external deployment that the task is integrating with.
  }{
    Put step \reference{put-params} and get step \reference{get-params} are
    also encrypted, even though they rarely should contain credentials (they're
    usually in \reference{source}).
  }{
    Team auth configurations, as they often contain things like GitHub or other
    oAuth client secrets.
  }

  Note that the actual implementation encrypts things in a more heavy-handed
  way than the above list implies. For example, pipeline configs are actually
  encrypted as one large blob.

  Notably, the following things are NOT encrypted:

  \list{
    Build logs. If your jobs are outputting credentials, encryption won't help
    you. We have chosen not to tackle this initially as it would introduce a
    performance burden for what is not as much of an obvious win.
  }{
    Resource versions. These should never contain credentials, and are often
    meaningless on their own.
  }{
    Resource metadata. These are visible to anyone if your pipeline is
    \reference{fly-expose-pipeline}{exposed}, and should never contain credentials.
  }{
    Pipeline names, job names, etc. - anything else that is not a high-risk
    target for \italic{credential} leakage, as opposed to regular information
    leaks.

    Resources and jobs in particular exist in their own tables, with their
    names in plaintext, and only their config encrypted. In this way, names are
    not protected, even though the pipeline config itself is also stored as one
    big encrypted blob.
  }
}

\section{Enabling Encryption}{
  To enable encryption, you'll just need to come up with a 16 or 32-byte
  random character sequence and configure it as \code{--encryption-key} flag to
  the \code{web} command. For BOSH, this is the \boshprop{atc}{encryption_key} property.

  On startup, the \reference{architecture-atc} will encrypt all existing
  plaintext data, and any new data being written will be encrypted before it's
  sent over the network to the database.

  The initial bulk encryption shouldn't take too long, but it will scale
  linearly with the amount of data that you have, and if another ATC is running
  it'll suddenly not be able to read the data until it's also given the key.
  So, expect some downtime.
}

\section{Rotating the Encryption Key}{
  To swap out the encryption key, you'll need to pass the previous key as
  \code{--old-encryption-key} (or \boshprop{atc}{old_encryption_key}), and the new key
  as \code{--encryption-key} (or \boshprop{atc}{encryption_key}).

  On startup, the \reference{architecture-atc} will decrypt all existing data
  and re-encrypt it with the new key, in one go. If it encounters a row which
  is already encrypted with the new key, it will continue on (as may be the
  case when restarting with the flags again, or if the ATC died in the middle
  of rotating).

  If the ATC encounters a row which cannot be decrypted with neither the old
  key nor the new one, it will log loudly and fail to start, telling you which
  row it choked on. This data must be dealt with in some way, either by
  re-configuring the key the row was encrypted with as the old key, or manually
  performing database surgery to remove the offending row. Hopefully this
  doesn't happen to you!
}

\section{Disabling Encryption}{
  To opt out of encryption entirely (I'm sure you have your reasons), simply
  pass \code{--old-encryption-key} (or \boshprop{atc}{old_encryption_key})
  alone. With no new encryption key, the \reference{architecture-atc} will
  decrypt all existing data on start.
}

\section{Next Steps for Concourse}{encryption-next-steps}{
  Ideally, Concourse would never be the source of truth for these credentials
  in the first place. It would only generate or fetch a credential for long
  enough to pass it to a resource or task, keeping it in its head as briefly as
  possible, and never on disk, encrypted or not.

  To this end, we're planning to implement support for credential managers like
  \hyperlink{https://www.vaultproject.io/}{Vault} and
  \hyperlink{https://github.com/cloudfoundry-incubator/credhub}{CredHub}. The
  GitHub issue tracking this is \ghissue{291}. We're still planning out what
  this looks like, and how the credential management itself is configured.
}
