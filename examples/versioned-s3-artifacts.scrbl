#lang concourse/docs

@(require "../common.rkt")

@title[#:tag "versioned-s3-artifacts" #:version version]{Versioned S3 Artifacts}

This document will guide you through a pipeline modeled on a fairly common
real-world use case of pushing tested artifacts into S3 buckets.

The resulting pipeline will look like this:

@image[#:style "pipeline" #:suffixes '(".svg") "examples/versioned-s3-artifacts"]{Rendered Pipeline}

@literate[
  @literate-segment[
    @para{
      First, we'll define our resources. These are the @emph{objects} used in
      our pipeline. The @code{resources} configuration simply enumerates each
      of their locations.
    }
    @codeblock{
      @||resources:
    }
  ]

  @literate-segment[
    @para{
      Our first resource will be the location of our product's source code.
      Let's pretend it lives in a Git repo, and so we'll use the
      @hyperlink["https://github.com/concourse/git-resource"]{@code{git}
      resource type}.
    }
    @para{
      The @code{git} resource requires two source parameters: @code{uri} and
      @code{branch}. We're using a SSH URI, so we'll also need to specify
      @code{private_key}.
    }
    @para{
      To avoid embedding credentials in the pipeline config, we'll use
      a @seclink["parameters"]{parameter}.
    }
    @codeblock{
      @||- name: my-product
      @||  type: git
      @||  source:
      @||    uri: git@"@"github.com:my-user/my-product.git
      @||    branch: master
      @||    private_key: {{my-product-github-private-key}}
    }
  ]

  @literate-segment[
    @para{
      We'll need a resource to represent the semantic version of our product,
      which we'll use to generate release candidates, and bump every time we
      ship. For this we'll use the
      @hyperlink["https://github.com/concourse/semver-resource"]{@code{semver}
      resource type}.
    }
    @para{
      Currently, @code{semver} resources keep track of the version as a file
      in a S3 bucket, so we'll need to specify the credentials for the bucket,
      and a name for the file.
    }
    @para{
      If your product already has a version number, you can specify it as
      @code{initial_version}. If not specified, the version will start as
      @code{0.0.0}.
    }
    @codeblock{
      @||- name: version
      @||  type: semver
      @||  source:
      @||    bucket: my-product-pipeline-artifacts
      @||    key: current-version
      @||    access_key_id: {{s3-access-key-id}}
      @||    secret_access_key: {{s3-secret-access-key}}
      @||    initial_version: 1.0.0
    }
  ]

  @literate-segment[
    @para{
      Let's define the resource for storing our product's release candidate
      artifacts generated by the pipeline. This is done with the
      @hyperlink["https://github.com/concourse/s3-resource"]{@code{s3}
      resource type}.
    }
    @para{
      The S3 resource is minimally configured with a @code{bucket} name and
      a @code{regexp}, which will be used to match files in the bucket and
      order them by the version number extracted by the first capture group.
    }
    @para{
      Since we'll be writing objects into this bucket, we'll need to configure
      it with AWS credentials.
    }
    @codeblock{
      @||- name: my-product-rc
      @||  type: s3
      @||  source:
      @||    bucket: my-product-pipeline-artifacts
      @||    regexp: my-product-(.*).tgz
      @||    access_key_id: {{s3-access-key-id}}
      @||    secret_access_key: {{s3-secret-access-key}}
    }
  ]

  @literate-segment[
    @para{
      We'll need one more @code{s3} resource to represent shipped artifacts.
    }
    @codeblock{
      @||- name: my-product-final
      @||  type: s3
      @||  source:
      @||    bucket: my-product
      @||    regexp: my-product-(.*).tgz
      @||    access_key_id: {{s3-access-key-id}}
      @||    secret_access_key: {{s3-secret-access-key}}
    }
  ]

  @literate-segment[
    @para{
      Now that we've got all our resources defined, let's move on define the
      "functions" to apply to them, as represented by @code{jobs}
    }
    @codeblock{
      @||jobs:
    }
  ]

  @literate-segment[
    @para{
      Our first job will run the unit tests for our project. This job will
      fetch the source code via the @code{my-product} resource, execute the
      @seclink["configuring-tasks"]{Task configuration file} living in the
      repo repo under @code{ci/unit.yml}.
    }
    @para{
      We set @code{trigger: true} on the @code{gett} step so that it
      automatically triggers a new @code{unit} build whenever new commits are
      pushed to the @code{my-product} repository.
    }
    @codeblock{
      @||- name: unit
      @||  plan:
      @||  - get: my-product
      @||    trigger: true
      @||  - task: unit
      @||    file: my-product/ci/unit.yml
    }
  ]

  @literate-segment[
    @para{
      Our pipeline now does something! But we're not quite delivering
      artifacts yet.
    }
  ]

  @literate-segment[
    @para{
      In this case, let's consider anything making it past the unit tests to
      be a candidate for release. So, let's use the @code{version} resource to
      autogenerate release candidate versions, and build an artifact!
    }
    @para{
      Note that for jobs like this you'll want to specify @code{serial: true}
      to ensure you're not accidentally generating release candidates out of
      order.
    }
    @codeblock{
      @||- name: build-rc
      @||  serial: true
      @||  plan:
    }
  ]

  @literate-segment[
    @para{
      First, let's be sure to only grab versions of @code{my-product} that
      have passed unit tests. Let's have new occurrences of these versions
      also trigger new builds, while we're at it.
    }
    @codeblock{
      @||  - get: my-product
      @||    passed: [unit]
      @||    trigger: true
    }
  ]

  @literate-segment[
    @para{
      We'll also need a new release candidate version number. For this, we'll
      use the @code{semver} resource's params to provide a bumped version to
      our job. Specifying both @code{bump} and @code{pre} says "if the current
      version is already a release candidate, add 1 to it, if not, generate
      a release candidate for the next minor version".
    }
    @codeblock{
      @||  - get: version
      @||    params: {bump: minor, pre: rc}
    }
  ]
  
  @literate-segment[
    @para{
      Now, we'll execute our @code{build-artifact} task configuration, which
      we'll assume looks something like:
    }
    @codeblock{
      inputs:
      - name: my-product
      - name: version

      run:
        path: my-product/scripts/build-artifact
    }
    @para{
      ...assuming the @code{build-artifact} script produces a file named
      @code{my-product-{VERSION}.tgz}.
    }
    @codeblock{
      @||  - task: build-artifact
      @||    file: my-product/ci/build-artifact.yml
    }
  ]

  @literate-segment[
    @para{
      Now that we have a tarball built, let's @code{put} it up to the
      artifacts S3 bucket via the @code{my-product-rc} resource defined above.
    }
    @para{
      Note that we refer to the task that generated the @code{.tgz} in the
      path specified by the @code{from} param.
    }
    @codeblock{
      @||  - put: my-product-rc
      @||    params: {from: build-artifaact/my-product-.*.tgz}
    }
  ]

  @literate-segment[
    @para{
      We'll also need to push up the newly bumped version number, so that next
      time we bump it'll be based on this new one.
    }
    @para{
      Note that the @code{file} param points at the version created by the
      @code{version} step above.
    }
    @codeblock{
      @||  - put: version
      @||    params: {file: version/number}
    }
  ]

  @literate-segment[
    @para{
      Now we're cooking with gas. But still, we haven't shipped any actual
      versions of the project yet: only candidates! Let's move on to the later
      stages in the pipeline.
    }
  ]

  @literate-segment[
    @para{
      Let's assume there's some more resource-intensive integration suite that
      uses our product, as a black-box. This will be the final set of checks
      and balances before shipping actual versions.
    }
    @para{
      In this case let's assume our @code{integration} task has to talk to
      some external environment, and so we'll also configure @code{serial}
      here to prevent concurrent builds from polluting each other.
    }
    @codeblock{
      @||- name: integration
      @||  serial: true
      @||  plan:
    }
  ]

  @literate-segment[
    @para{
      For the integration job, we'll need two things: the candidate artifact,
      and the repo that it came from, which contains all our CI scripts.
    }
    @para{
      Note that this usage of @code{passed} guarantees that the two versions
      of @code{my-product} and @code{my-product-rc} respectively came out
      from the @emph{same build} of @code{build-rc}.
    }
    @codeblock{
      @||  - get: my-product-rc
      @||    trigger: true
      @||    passed: [build-rc]
      @||  - get: my-product
      @||    passed: [build-rc]
    }
  ]

  @literate-segment[
    @para{
      We'll now run the actual integration task. Since it has to talk to some
      external environment, we'll use @code{config.params} to forward
      credentials along to the task.
    }
    @para{
      Again we'll use @seclink["parameters"]{parameters} in the config file to
      prevent hardcoding them.
    }
    @codeblock{
      @||  - task: integration
      @||    file: my-product/ci/integration.yml
      @||    config:
      @||      params:
      @||        API_ENDPOINT: {{integration-api-endpoint}}
      @||        ACCESS_KEY: {{integration-access-key}}
    }
  ]

  @literate-segment[
    @para{
      At this point in the pipeline we have artifacts that we're ready to
      ship. So let's define a job that, when manually triggered, takes the
      latest candidate release and ships it to our S3 bucket.
    }
  ]

  @literate-segment[
    @para{
      We'll call the job @code{shipit} and make sure it only runs serially,
      since it's mutating external resources. This won't matter too much in
      practice though, since the job will only ever be manually triggered.
    }
    @codeblock{
      @||- name: shipit
      @||  plan:
    }
  ]

  @literate-segment[
    @para{
      Similar to the @code{integration} job, we'll once again need both our
      source code and the latest release candidate, this time having passed
      @code{integration} together.
    }
    @para{
      Note that we have not specified @code{trigger: true} this time - this is
      because with a typical release-candidate pipeline, the shipping stage is
      only ever manually kicked off.
    }
    @codeblock{
      @||  - get: my-product-rc
      @||    passed: [integration]
      @||  - get: my-product
      @||    passed: [integration]
    }
  ]

  @literate-segment[
    @para{
      Now we'll need to determine the final version number that we're about to
      ship. This is once again done by @code{params} when fetching the
      version.
    }
    @para{
      This time, we'll only specify @code{bump} as @code{final}. This means
      "take the version number and chop off the release candidate bit."
    }
    @codeblock{
      @||  - get: version
      @||    params: {bump: final}
    }
  ]

  @literate-segment[
    @para{
      Next, we'll need to convert the release candidate artifact to a final
      version.
    }
    @para{
      This step depends on the type of product you have; in the simplest case
      it's just a matter of renaming the file, but you may also have to
      rebuild it with the new version number, or push dependent files, etc.
    }
    @para{
      For the purposes of this example, let's assume we have a magical task
      that does it all for us, and leaves us with a file called
      @code{my-product-{VERSION}.tgz}, just as with the @code{build-rc} job
      before.
    }
    @codeblock{
      @||  - task: promote-to-final
      @||    file: my-product/ci/promote-to-final.yml
    }
  ]

  @literate-segment[
    @para{
      And now for the actual shipping!
    }
    @codeblock{
      @||  - put: my-product-final
      @||    params: {from: promote-to-final/my-product-.*.tgz}
      @||  - put: version
      @||    params: {from: version/number}
    }
  ]
]

@inject-analytics[]
