use(require("atomy"))

require("time")

data = require("anatomy/data")

hl = require("hl")
yaml = hl load("yaml")

base = require("anatomy/base")

fn(release-asset(version, filename)):
  i"https://github.com/concourse/concourse/releases/download/v#{version}/#{filename}"

fn(binary-url(version, platform, extension)):
  release-asset(version, i"concourse_#{platform}_amd64#{extension}")

fn(download-link(label, url, *extra)):
  data Block new(
    [data Element new([font-awesome("fa-download"), label], .hyperlink(url))] + extra
    .list-item)

fn(version(number)):
 data Element new(i"v#{number}", .class("version-number"))

def(resource(repo, name = repo split("-") collect &.capitalize join(" "))):
  hyperlink(i"https://github.com/concourse/#{repo}-resource", i"#{name} resource")

def(ghuser(username)):
  hyperlink(i"https://github.com/#{username}", bold(i"@#{username}"))

def(release(date = nil, concourse-version, garden-linux-version, notes)):
  release-date = nil
  when(date):
    release-date =
      data Element new(
        Time parse(date) strftime("%B %e, %Y")
        .class("release-date"))

  version-title = i"v#{concourse-version}"

  data Block new(
    [ set-title(version-title)
      data Target new(data sanitize(version-title))
      data Block new(
        [ data Block new(reference(version-title, version-title), .header(1))
          data Block new(release-date, .class("version-info"))
        ]
        .class("version-header"))
      data Block new(
        [ data Block new(
            [ data Block new("Release Notes", .header(2))
              notes
            ]
            .class("notes"))
          data Block new(
            [ data Block new(["Downloads", version(concourse-version)], .header(2))
              data Block new(
                [ data Block new("Concourse Binaries", .header(3))
                  data Block new(
                    [ download-link("Linux", binary-url(concourse-version, "linux", ""))
                      download-link("Windows", binary-url(concourse-version, "windows", ".exe"))
                      download-link("OS X", binary-url(concourse-version, "darwin", ""))
                    ]
                    .unordered-list)
                ]
                .class("download-links"))
              data Block new(
                [ data Block new("BOSH Releases", .header(3))
                  data Block new(
                    [ download-link("Concourse", release-asset(concourse-version, i"concourse-#{concourse-version}.tgz"), version(concourse-version))
                      download-link("Garden Linux", release-asset(concourse-version, i"garden-linux-#{garden-linux-version}.tgz"), version(garden-linux-version))
                    ]
                    .unordered-list)
                ]
                .class("download-links"))
            ]
            .class("downloads"))
        ]
        .class("release"))
    ])

def(note(*tags, content)):
  tags sort! [a, b]:
    [a, b] match:
      ["feature" | "fix", _]:
        -1

      [_, "feature" | "fix"]:
        1

      _:
        0

  data Block new(
      [ data Block new(
          tags collect [tag]:
            data Block new(
              data Block new(tag, .class("note-tag", tag))
              .list-item)
          .classed(.unordered-list, "tags"))
        content
      ]
      .class("release-note"))

def(tutorial-image(asset-path)):
  data Block new(
      base image(asset-path)
      .class("tutorial-image"))

def(font-awesome(class)):
  data Element new("", .font-awesome(class))

def(warn(content)):
  data Block new(
      content
      .class("warning"))

def(pipeline-image(asset-path)):
  data ResolveBlock new(
    [part]:
      part assets << File expand-path(asset-path)
      part assets << File expand-path("../css/pipeline-svg.css", __FILE__)
      part css-additions << File expand-path("../css/flex-pipeline-image.css", __FILE__)

      data Block new(
        data Element new(
          ""
          .svg(File basename(asset-path)))
        .class("pipeline-image")))

def(literate-segment(*paras, code)):
  when(paras empty?):
    paras = [code]
    code = ""

  data Block new(
    data Block new(
      [
        data ResolveElement new(
          [part]:
            part css-additions << File expand-path("../literate.css", __FILE__)
            data Element new([]))

        data Block new(
          paras
          .class("prose"))

        data Block new(
          code
          .class("code"))
      ]
      .class("literate-entry"))
    .class("literate-segment"))

fn(format-inline(tokens, link-only = nil)):
  tokens collect [t]:
    data Element new(
      -- constants, identifiers, and operators
      if((link-only && link-only include?(t contents)) ||
          (!link-only && ["no", "n", "o"] include?(t type tag)))
        then: base reference(t contents, t contents)
        else: t contents
      .class(t type tag))

def(titled-codeblock(title, lang, *content)):
  data Block new(
    [ data Block new(base code(title), .class("codeblock-title"))
      base codeblock(lang, *content)
    ]
    .class("titled-codeblock"))

def(define-metric(metric-name, body)):
  target = base target-element(metric-name)

  data Block new(
    [
      data Block new(
        [data Block new([target, metric-name], .tt)]
        .class("thumb"))

      body
    ]
    .class("definition"))

def(define-attribute(what, *tags, body)):
  define-tagged-attributes([what], tags, body)

def(define-attributes(*whats, body)):
  define-tagged-attributes(whats, [], body)

def(define-tagged-attributes(whats, tags, body)):
  attribute-names = whats collect [w]: w split(":") first

  tags =
    if(tags empty?)
      then: attribute-names
      else: tags

  targets = attribute-names collect [attr] {
    tags collect [tag]:
      base target-element(tag, base code(format-inline(yaml lex(attr), [])))
  } flatten

  link-target = tags first

  data Block new(
    [ whats collect with-index [w, i]:
        display = base reference(link-target, format-inline(yaml lex(w), []))

        data Block new(
          [data Block new([targets, display], .tt)]
          .class("thumb"))

      body
    ]
    .class("definition"))

def(slack-button):
  data ResolveElement new(
    [part]:
      part css-additions << File expand-path("../slack.css", __FILE__)

      data Element new(
        [],
        .async-script-src("http://slack.concourse.ci/slackin.js")))

def(column(name, content)):
  ents = []
  Array(content) select [x]:
    x match:
      .entry(content, type):
        ents << data Block new([data Block new([content], .class("cell"))], .class(type))

  data List new([data Block new([name], .class("header"))] + ents)

def(normal(content)):
  .entry(content, "normal")

def(good(content)):
  .entry(content, "good")

def(bad(content)):
  .entry(content, "bad")

def(gap(content)):
  .entry(content, "gap")

def(disabled(content)):
  .entry(content, "disabled")

def(resources-table(body)):
  data ResolveBlock new(
    [part]:
      part css-additions << File expand-path("../resources-table.css", __FILE__)

      data Block new(body, .class("resources-table")))

def(talk(title, author, thumb, video, slides, description)):
  data Block new(
    [ data Block new(
        [ data Block new(
            data Element new(title, .classed(.hyperlink(video), "talk-title"))
            .classed(.header(2), "talk-header"))
          data Block new(["by ", author], .class("talk-author"))
          data Block new(
            description
            .class("talk-description"))
        ]
        .class("talk-info"))
      data Block new(
        [ data Block new(
            [ data Element new(image(thumb, "talk thumbnail"), .hyperlink(video))
              unless(slides empty?):
                data Element new("slides", .classed(.hyperlink(slides), "talk-slides-link"))
            ]
            .class("talk-thumbnail"))
        ]
        .class("talk-links"))
    ]
    .class("talk"))
