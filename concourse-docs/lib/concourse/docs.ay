use(require("atomy"))

data = require("anatomy/data")

hl = require("hl")
yaml = hl load("yaml")

base = require("anatomy/base")

def(pipeline-image(asset-path)):
  data ResolveElement new(
    [part]:
      part assets << File expand-path(asset-path)
      part css-additions << File expand-path("../flex-pipeline-image.css", __FILE__)

      data Block new(
        data Element new(
          ""
          .svg(File basename(asset-path)))
        .class("pipeline-image")))

def(literate-segment(*paras, code)):
  when(paras empty?):
    paras = [code]
    code = ""

  data ResolveElement new(
    [part]:
      part css-additions << File expand-path("../literate.css", __FILE__)

      data Block new(
        data Block new(
          [
            data Block new(
              paras collect &.(data Paragraph new(_))
              .class("prose"))
            data Block new(
              code
              .class("code"))
          ]
          .class("literate-entry"))
        .class("literate-segment")))

fn(format-inline(tokens, link-only = nil)):
  tokens collect [t]:
    data Element new(
      -- constants, identifiers, and operators
      if((link-only && link-only include?(t contents)) ||
          (!link-only && ["no", "n", "o"] include?(t type tag)))
        then:
          data ResolveElement new(
            [part]:
              tag = part find-tag(t contents)
              if(tag)
                then: data Reference new(tag, t contents)
                else: t contents)
        else: t contents
      .class(t type tag))

def(define-attribute(what, body)):
  define-attributes(what, body)

def(define-attributes(*whats, body)):
  attribute-names = whats collect [w]: w split(":") first

  targets = attribute-names collect [a]: base target-element(a)

  data Block new(
    [ whats collect with-index [w, i]:
        display = format-inline(yaml lex(w), attribute-names[i])

        data Block new(
          [data Block new([targets, display], .tt)]
          .class("thumb"))

      body
    ]
    .class("definition"))

def(slack-button):
  data ResolveElement new(
    [part]:
      part css-additions << File expand-path("../slack.css", __FILE__)

      data Element new(
        [],
        .async-script-src("http://slack.concourse.ci/slackin.js")))
