\title{Concourse Internals}{internals}

\use-plugin{concourse-docs}

\split-sections
\table-of-contents

\section{
  \title{Garbage Collection}

  * Know when it's safe to GC something via database integrity
  * Garbage Collector should never have any difficult decisions
  * Eventually consistent
  * Durable to misbehaving workers
}

\section{
  \title{Database Schema}

  \section{
    \title{Core}

    \define-table{pipelines}{
      TODO
    }

    \define-table{jobs}{
      TODO
    }

    \define-table{builds}{
      TODO
    }

    \define-table{resources}{
      TODO
    }

    \define-table{resource_types}{
      TODO
    }

    \define-table{versioned_resources}{
      TODO
    }
  }

  \section{
    \title{Resources}

    \define-table{resource_configs}{
      A \italic{resource config} is analogous to an entry under
      \code{resources:} in a pipeline - it's just a \italic{type} and a
      \italic{source}.

      A resource config's \italic{type} is either a
      \reference{base_resource_types-table}{base resource type} or, in the case
      of a custom resource type, the \reference{resource_caches-table}{resource
      cache} of its custom type's image resource.

      A resource config is used for discovering versions. Unlike
      \reference{resources-table}{pipeline resources}, they have no name, and
      are identified entirely by their type and source. Resource configs are
      shared across pipelines and teams, since identical resource
      configurations can be reused.
    }

    \define-table{resource_caches}{
      A \italic{resource cache} represents all information necessary to fetch a
      particular set of bits, i.e. the \italic{cache}.

      A resource cache always points to its \reference{resource_configs-table},
      and also specifies the \italic{version} and \italic{params}.

      Note that \reference{resource_configs-table} and
      \reference{resource_caches-table} both point to each other. This loop is
      closed by a resource config that points to a
      \reference{base_resource_types-table}{base resource type} at the end of
      the chain. This represents the case of a resource cache provided by a
      custom resource type, which in turn may be provided by \italic{another}
      custom resource type, and so on, until they reach a base type.
    }

    \define-table{resource_config_uses}{
      A \italic{config use} is a join table between a
      \reference{resource_configs-table}{resource config} and a 'user', which
      lets us know when the use is no longer needed. Think of it as a reference
      counter.

      A use can be tied to a \reference{builds-table}, in which case the use
      can be removed when the build is finished.

      A use can be tied to a \reference{resource_config_check_sessions-table},
      in which case the use can be removed when the session expires.
    }

    \define-table{resource_cache_uses}{
      A \italic{cache use} is a join table between a
      \reference{resource_caches-table}{resource cache} and a 'user', which
      lets us know when the use is no longer needed. Think of it as a reference
      counter.

      A use can be tied to a \reference{builds-table}, in which case the use
      can be removed when the build is finished.

      A use can be tied to a \reference{resource_config_check_sessions-table},
      in which case the use can be removed when the session expires.
    }

    \define-table{resource_config_check_sessions}{
      A \italic{resource config check session} is used for periodic resource
      checking of \reference{resources-table} and
      \reference{resource_types-table} by pointing to their
      \reference{resource_configs-table}{resource config}. There is only one
      check container per resource config, even if it's defined in many
      pipelines.

      A check session's expiry is tied to its worker's uptime, as a simple way
      to force balancing of check containers across workers more quickly after
      a deploy.
    }

    \define-table{base_resource_types}{
      A \italic{base resource type} is simply the name of any resource type
      provided by any worker. It is used to keep
      \reference{resource_configs-table} as general as possible, and not tied
      to particular workers. This in turn allows
      \reference{resource_caches-table} to also be general, as is desired for
      Concourse's higher-level pipeline resource caching semantics.
    }

    \define-table{worker_base_resource_types}{
      A \italic{worker base resource type} is a particular version of a
      resource type as provided by a worker. When a worker registers, its base
      resource types are synced by first removing old versions and then
      inserting new ones.
    }

    \define-table{worker_resource_caches}{
      A \italic{worker resource cache} is a join between a
      \reference{resource_caches-table}{resource cache} and a
      \reference{worker_base_resource_types-table}{worker base resource type}.

      A worker resource cache is automatically removed when its worker base
      resource type or resource cache is removed. This is used to automatically
      invalidate any caches that were fetched with an old version of a base
      resource type.
    }
  }

  \section{
    \title{Runtime}

    \define-table{containers}{
      The \italic{containers} table represents the set of all containers across
      all the workers, and keeps track of their state such that no container is
      ever left behind on a worker.

      Containers have a handful of really important attributes:
      \inset{
        \define-attribute{handle: string}{
          The unique identifier of the container in Garden.
        }{containers-handle}
        \define-attribute{worker_name: string}{
          The name of the worker where the container is located.
        }{containers-worker_name}
        \define-attribute{state: \code{CREATING}, \code{CREATED}, or \code{DESTROYING}}{
          The stage in the lifecycle of the container. See \reference{containers}
        }{containers-state}

        Containers can be one of four types, each with individual references
        to their relating object.

        \define-attribute{image_check_container_id: fkey}{
          This signifies that the container is dependant on another container which
          is busy checking for the image this container will be based on. This is
          used in the case of custom resource types, or tasks with image_resource.
          This container will be in the \code{CREATING} \reference{containers-state}{state}
          until the image is fetched later.
        }{containers-image_check_container_id}
        \define-attribute{image_get_container_id: fkey}{
          This signifies that the container is dependant on another container which
          is busy downloading the bits for the image this container will be based on.
          This is used in the case of custom resource types, or tasks with image_resource.
          This container will be in the \code{CREATING} \reference{containers-state}{state}
          until the image is fetched.
        }{containers-image_get_container_id}
        \define-attribute{build_id: fkey}{
          If this container is for a build step, this column refers to the id of the build
          this container is related to.
        }{containers-build_id}
        \define-attribute{resource_id: fkey}{
          If this container is for running the check script for a resource, this column
          refers to a \reference{resource_config_check_sessions-table}.
        }{containers-resource_id}
      }
    }

    \define-table{volumes}{
      The \italic{volumes} table represents the set of all volumes across all
      the workers, and keeps track of their state such that no volume is ever
      left behind on a worker.

      Volumes have a handful of really important attributes.
      \inset{
        \define-attribute{handle: string}{
          The unique identifier of the volume in BaggageClaim.
        }{volumes-handle}
        \define-attribute{worker_name: string}{
          The name of the worker where the volume located.
        }{volumes-worker_name}
        \define-attribute{state: \code{CREATING}, \code{CREATED}, or \code{DESTROYING}}{
          The stage in the lifecycle of the volume. See \reference{volumes}
        }{volumes-state}
        \define-attribute{container_id: fkey}{
          The container this volume is associated with.
        }{volumes-container_id}
        \define-attribute{worker_base_resource_type_id: fkey}{
          If this volume is used for a \reference{worker_base_resource_types-table}{worker base resource type}
          this column points to it.
        }{volumes-worker_base_resource_type_id}
        \define-attribute{worker_resource_cache_id: fkey}{
          If this volume is for a \reference{worker_resource_caches-table}{worker resource cache}
          this column points to it.
        }{volumes-worker_resource_cache_id}
        \define-attribute{worker_task_cache_id: fkey}{
          If this volume is for a \reference{worker_task_caches-table}{worker task cache}
          this column points to it.
        }{volumes-worker_task_cache_id}
      }
    }

    \define-table{workers}{
      The \italic{workers} table represents all of the workers that have registered
      with the Concourse cluster.

      \define-attribute{name: string}{
        The unique name for the worker used to identify it in the cluster.
      }{worker-addr}
      \define-attribute{addr: string}{
        The full address of the Garden server running for the worker.
      }{worker-addr}
      \define-attribute{state: RUNNING, STALLED, LANDING, LANDED, RETIRING, RETIRED }{
        The current state of the worker. This keeps track of the worker's
        lifecycle in order to handle the lifecycle of workers and their
        ability to have new containers or volumes created on them.
      }{worker-state}
      \define-attribute{baggageclaim_url: string}{
        The full address of the worker's baggageclaim server; used to store volumes
        on the worker.
      }
    }
    \define-table{worker_task_caches}{
      The \italic{worker task caches} table tracks all of the details of a \reference{caches}{task cache}
      for a specific worker. \italic{Worker task caches} are created for any \reference{task-step} in a
      job for all of the paths specified \reference{caches}{task cache}.

      This table is used to identify worker task cache volumes by their \reference{volumes-worker_task_cache_id}{id}.
    }
  }
}

\section{
  \title{Volumes}

  \section{
    \title{Lifecycle}
      Volumes can be in one of 3 states; \code{CREATING}, \code{CREATED}, \code{DESTROYING}.

      \code{CREATING}, volumes are still being initialized in BaggageClaim and are not
      yet ready to be used. \code{CREATING}, volumes can only transition to \code{CREATED}.

      \code{CREATED} volumes are initialized in BaggageClaim and are ready to be used.
      \code{CREATED} volumes can only be transitioned to \code{DESTROYING}.

      \code{DESTROYING} volumes are marked for removal from BaggageClaim, and should
      no longer be used; they will be removed from the database when they no
      longer exist in the BaggageClaim server.
  }

  \section{
    \title{Types of Volumes}
  }

  \section{
    \title{Volume Garbage Collection}
      There is a periodic process which runs on the ATC, and performs a mark-and-sweep
      style garbage collection of volumes. The Container GC performs the following steps:
      \ordered-list{
        Finds \code{CREATING} and \code{CREATED} volumes which can be marked for removal.
      }{
        Marks them for removal by transitioning them to the \code{DESTROYING} state.
      }{
        Tells the BaggageClaim server to destroy volumes which are in the \code{DESTROYING} state.
      }
  }
}

\section{
  \title{Containers}

  * When do they go away

  \section{
    \title{Lifecycle}
      Containers can be in one of 3 states; \code{CREATING}, \code{CREATED}, \code{DESTROYING}.

      \code{CREATING}, containers are still being initialized in Garden and are not yet
      ready to be used. \code{CREATING}, containers can only transition to \code{CREATED}.

      \code{CREATED} containers are initialized in Garden and are ready to be used. A
      \code{CREATED} container can only be transitioned to \code{DESTROYING}.

      \code{DESTROYING} containers are marked for removal in Garden, and should no
      longer be used; they will be removed from the database when they no
      longer exist in the Garden server.
  }


 \section{
    \title{Types of Containers}
    These are the types of containers:

      \section{
        \title{Task Containers}

        \italic{Task containers} are created when a \reference{task-step} is exectuted in a build plan.
        They are based on the image produced by the configured \reference{image_resource}. 
      }

      \section{
        \title{Resource Check Container}

        \italic{Resource Check Containers} are created from the resource type's image and are used
        to check for new versions of a resource.
        There will be one per \reference{resource_configs-table}{resource config}
      }

      \section{
        \title{Resource Get Container}

        \italic{Resource Get Container} are created when a \reference{get-step} is exectuted in a build plan.
        They are based on the resource type's image and are used to download the bits for a given version of resource.

        There will be one per \reference{resource_configs-table}{resource config}
      }
  }

  \section{
    \title{Container Garbage Collection}

      There is a periodic process which runs on the ATC, and performs a mark-and-sweep
      style garbage collection of containers. The Container GC performs the following steps:
      \ordered-list{
        Finds \code{CREATING} and \code{CREATED} containers which can be marked for removal.
      }{
        Marks them for removal by transitioning them to the \code{DESTROYING} state.
      }{
        Tells the Garden server to destroy containers which are in the \code{DESTROYING} state.
      }
  }

 }

\section{
  \title{Workers}

  * What makes a worker?
  * Worker lifecycle

}
