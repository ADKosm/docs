\title{Pipelines}{pipelines}

\use-plugin{concourse-docs}

A pipeline is the result of configuring \reference{jobs} and connecting them to
\reference{resources}. When you configure a pipeline, it takes on a life of
its own, to continuously detect resource versions and trigger jobs as their
input resources change.

\define-attribute{jobs: [job]}{
  A set of \reference{jobs}{job}s for the pipeline to continuously check.
}{pipeline-jobs}

\define-attribute{resources: [resource]}{
  A set of \reference{resources}{resource}s for the pipeline to continuously
  check.
}{pipeline-resources}

\define-attribute{resource_types: [resource_type]}{
  A set of \reference{resource-types}{resource type}s for resources within the
  pipeline to use.
}{pipeline-resource-types}

\define-attribute{groups: [group]}{
  Where each \italic{\code{group}} is:

  \define-attribute{name: string}{
    \italic{Required.} The name of the group. This should be short and simple as
    it will be used as the tab name for navigation.
  }{group-name}

  \define-attribute{jobs: [string]}{
    \italic{Optional.} A list of jobs that should appear in this group. A job may
    appear in multiple groups. Neighbours of jobs in the current group will also
    appear on the same page in order to give context of the location of the
    group in the pipeline.
  }{group-jobs}

  \define-attribute{resources: [string]}{
    \italic{Optional.} A list of resources that should appear in this group.
    Resources that are inputs or outputs of jobs in the group are automatically
    added; they do not have to be explicitly listed here.
  }{group-resources}

  As more resources and jobs are added to a pipeline it can become difficult to
  navigate in the web UI. Pipeline groups allow you to group jobs together under
  a header and have them show on different tabs in the user interface. Groups
  have no functional effect on your pipeline.

  A simple grouping for the pipeline above may look like:

  \codeblock{yaml}{{
  groups:
  - name: tests
    jobs:
    - controller-mysql
    - controller-postgres
    - worker
    - integration
  - name: deploy
    jobs:
    - deploy
  }}

  This would display two tabs at the top of the home page: "tests" and "deploy".
  Once you have added groups to your pipeline then all jobs must be in a group
  otherwise they will not be visible.

  For a real world example of how groups can be used to simplify navigation and
  provide logical grouping, see the groups used at the top of the page in the
  \link{Concourse pipeline}{https://ci.concourse.ci}.
}{pipeline-groups}

\split-sections

\include-section{pipelines/configuring.lit}
\include-section{pipelines/managing.lit}

\examples{
  \example{Hello, world!}{
    The following example makes use of an embedded \reference{tasks}{task
    config} to define the smallest possible pipeline.

    \codeblock{yaml}{{{
      jobs:
      - name: hello-world
        plan:
        - task: say-hello
          config:
            platform: linux
            image_resource:
              type: docker-image
              source: {repository: alpine}
            run:
              path: echo
              args: ["Hello, world!"]
    }}}
  }

  \example{Small Go Project}{
    When it comes to real-world projects, task configs are usually stored
    alongside the code that it's testing. This makes the pipeline a bit
    smaller and makes the config able to change without needing to
    reconfigure the pipeline.

    \codeblock{yaml}{{
      ---
      resources:
      - name: booklit
        type: git
        source:
          uri: https://github.com/vito/booklit
          branch: master

      jobs:
      - name: unit
        plan:
        - get: booklit
          trigger: true
        - task: unit
          file: booklit/ci/test.yml
    }}
  }

  \example{Chaining Jobs}{
    Promoting resources to downstream jobs is done by setting
    \reference{get-step-passed} on a \reference{get-step}{\code{get} step}.

    Note that nothing in \code{unit} says anything about triggering
    \code{build}. Job definitions are self-contained; they describe their
    dependencies and where they come from, which results in a dependency flow
    that Concourse pushes forward.

    \codeblock{yaml}{{{
      ---
      resources:
      - name: booklit
        type: git
        source:
          uri: https://github.com/vito/booklit
          branch: master

      jobs:
      - name: unit
        plan:
        - get: booklit
          trigger: true
        - task: unit
          file: booklit/ci/test.yml

      - name: build
        plan:
        - get: booklit
          passed: [unit]
          trigger: true
        - task: unit
          file: booklit/ci/build.yml
    }}}
  }

  \example{Using Resource Types}{
    \reference{resource-types}{Resource Types} can be used to extend the
    functionality of your pipeline and provide deeper integrations. This
    example uses one to trigger a job whenever a new \link{Dinosaur
    Comic}{http://www.qwantz.com} is out.

    \codeblock{yaml}{{{
      ---
      resource_types:
      - name: rss
        type: docker-image
        source:
          repository: suhlig/concourse-rss-resource
          tag: latest

      resources:
      - name: booklit-releases
        type: rss
        source:
          url: http://www.qwantz.com/rssfeed.php

      jobs:
      - name: announce
        plan:
        - get: booklit-releases
          trigger: true
    }}}
  }
}
