\title{Pipelines}{pipelines}

\use-plugin{concourse-docs}

A pipeline is the result of configuring \reference{jobs} and connecting them to
\reference{resources}. When you configure a pipeline, it takes on a life of
its own, to continuously detect resource versions and trigger jobs as their
input resources change.

\define-attribute{jobs: [job]}{
  A set of \reference{jobs}{job}s for the pipeline to continuously check.
}{pipeline-jobs}

\define-attribute{resources: [resource]}{
  A set of \reference{resources}{resource}s for the pipeline to continuously
  check.
}{pipeline-resources}

\define-attribute{resource_types: [resource_type]}{
  A set of \reference{resource-types}{resource type}s for resources within the
  pipeline to use.
}{pipeline-resource-types}

\define-attribute{groups: [group]}{
  Where each \italic{\code{group}} is:

  \define-attribute{name: string}{
    \italic{Required.} The name of the group. This should be short and simple as
    it will be used as the tab name for navigation.
  }{group-name}

  \define-attribute{jobs: [string]}{
    \italic{Optional.} A list of jobs that should appear in this group. A job may
    appear in multiple groups. Neighbours of jobs in the current group will also
    appear on the same page in order to give context of the location of the
    group in the pipeline.
  }{group-jobs}

  \define-attribute{resources: [string]}{
    \italic{Optional.} A list of resources that should appear in this group.
    Resources that are inputs or outputs of jobs in the group are automatically
    added; they do not have to be explicitly listed here.
  }{group-resources}

  As more resources and jobs are added to a pipeline it can become difficult to
  navigate in the web UI. Pipeline groups allow you to group jobs together under
  a header and have them show on different tabs in the user interface. Groups
  have no functional effect on your pipeline.

  A simple grouping for the pipeline above may look like:

  \codeblock{yaml}{{
  groups:
  - name: tests
    jobs:
    - controller-mysql
    - controller-postgres
    - worker
    - integration
  - name: deploy
    jobs:
    - deploy
  }}

  This would display two tabs at the top of the home page: "tests" and "deploy".
  Once you have added groups to your pipeline then all jobs must be in a group
  otherwise they will not be visible.

  For a real world example of how groups can be used to simplify navigation and
  provide logical grouping, see the groups used at the top of the page in the
  \link{Concourse pipeline}{https://ci.concourse.ci}.
}{pipeline-groups}

\split-sections

\include-section{pipelines/configuring.lit}
\include-section{pipelines/managing.lit}
{-
\include-section{./configuring/groups.lit}
-}
