\title{Standalone Binary}{binaries}

\use-plugin{concourse-docs}

\omit-children-from-table-of-contents

At some point you may want to start putting Concourse on to real hardware. A
binary distribution is available in the \reference{downloads}{downloads}
section.

The binary is fairly self-contained, making it ideal for tossing onto a VM by
hand or orchestrating it with Docker, Chef, or other ops tooling.

\section{
  \title{Prerequisites}

  \list{
    Grab the appropriate binary for your platform from the
    \reference{downloads}{downloads} section.
  }{
    For Linux you'll need kernel v3.19 or later, with user namespace support
    enabled. Windows and Darwin don't really need anything special.
  }{
    PostgreSQL 9.5+
  }
}

\section{
  \title{Generating Keys}{generating-keys}

  To run Concourse securely you'll need to generate 3 private keys (well, 2,
  plus 1 for each worker):

  \definitions{
    \definition{\code{session_signing_key} (currently must be RSA)}{
      Used for signing user session tokens, and by the \link{TSA}{https://github.com/concourse/tsa} to sign its own
      tokens in the requests it makes to the ATC.
    }
  }{
    \definition{\code{tsa_host_key}}{
      Used for the TSA's SSH server. This is the key whose fingerprint you
      see when the \code{ssh} command warns you when connecting to a host it
      hasn't seen before.
    }
  }{
    \definition{\code{worker_key} (one per worker)}{
      Used for authorizing worker registration. There can actually be an
      arbitrary number of these keys; they are just listed to authorize
      worker SSH access.
    }
  }

  To generate these keys, run:

  \codeblock{bash}{{
  ssh-keygen -t rsa -f tsa_host_key -N ''
  ssh-keygen -t rsa -f worker_key -N ''
  ssh-keygen -t rsa -f session_signing_key -N ''
  }}

  ...and we'll also start on an \code{authorized_keys} file, currently
  listing this initial worker key:

  \codeblock{bash}{{
  cp worker_key.pub authorized_worker_keys
  }}
}

\section{
  \title{Starting the Web UI & Scheduler}

  The \code{concourse} binary embeds the
  \link{ATC}{https://github.com/concourse/atc} and
  \link{TSA}{https://github.com/concourse/tsa} components, available as the
  \code{web} subcommand.

  The ATC is the component responsible for scheduling builds, and also serves
  as the web UI and API.

  The TSA provides a SSH interface for securely registering workers, even if
  they live in their own private network.

  \section{
    \title{Single node, local Postgres}

    The following command will spin up the ATC, listening on port
    \code{8080}, with some basic auth configured, and a TSA listening on port
    \code{2222}.

    \codeblock{bash}{{
    concourse web \\
      --basic-auth-username myuser \\
      --basic-auth-password mypass \\
      --session-signing-key session_signing_key \\
      --tsa-host-key tsa_host_key \\
      --tsa-authorized-keys authorized_worker_keys \\
      --external-url http://my-ci.example.com
    }}

    This assumes you have a local Postgres server running on the default port
    (\code{5432}) with an \code{atc} database, accessible by the current
    user. If your database lives elsewhere, just specify the
    \code{--postgres-data-source} flag, which is also demonstrated below.

    Be sure to replace the \code{--external-url} flag with the URI you expect
    to use to reach your Concourse server.

    In the above example we've configured basic auth for the
    \reference{main-team}{\code{main} team}. For further configuration see
    \reference{authentication}.
  }

  \section{
    \title{Cluster with remote Postgres}

    The ATC can be scaled up for high availability, and they'll also roughly
    share their scheduling workloads, using the database to synchronize.

    The TSA can also be scaled up, and requires no database as there's no
    state to synchronize (it just talks to the ATC).

    A typical configuration with multiple ATC+TSA nodes would have them
    sitting behind a load balancer, forwarding port \code{80} to \code{8080},
    \code{443} to \code{4443} (if you've enabled TLS), and \code{2222} to
    \code{2222}.

    To run multiple \code{web} nodes, you'll need to pass the following
    flags:

    \list{
      \code{--postgres-data-source} should all refer to the same database
    }{
      \code{--peer-url} should be a URL used to reach the individual ATC,
      from other ATCs, i.e. a URL usable within their private network
    }{
      \code{--external-url} should be the URL used to reach \italic{any} ATC,
      i.e. the URL to your load balancer
    }

    For example:

    Node 0:

    \codeblock{bash}{{
    concourse web \\
      --basic-auth-username myuser \\
      --basic-auth-password mypass \\
      --session-signing-key session_signing_key \\
      --tsa-host-key tsa_host_key \\
      --tsa-authorized-keys authorized_worker_keys \\
      --postgres-data-source postgres://user:pass@10.0.32.0/concourse \\
      --external-url https://ci.example.com \\
      --peer-url http://10.0.16.10:8080
    }}

    Node 1 (only difference is \code{--peer-url}):

    \codeblock{bash}{{
    concourse web \\
      --basic-auth-username myuser \\
      --basic-auth-password mypass \\
      --session-signing-key session_signing_key \\
      --tsa-host-key tsa_host_key \\
      --tsa-authorized-keys authorized_worker_keys \\
      --postgres-data-source postgres://user:pass@10.0.32.0/concourse \\
      --external-url https://ci.example.com \\
      --peer-url http://10.0.16.11:8080
    }}
  }
}

\section{
  \title{Starting Workers}{standalone-workers}

  Workers are \link{Garden}{http://github.com/cloudfoundry-incubator/garden}
  servers, continuously heartbeating their presence to the Concourse API.
  Workers have a statically configured \code{platform} and a set of
  \code{tags}, both of which determine where steps in a
  \reference{build-plans}{Build Plan} are scheduled.

  Linux workers come with a set of \link{base resource
  types}{https://concourse.ci/resource-types.html#section_resources-provided-with-concourse}.
  If you are planning to use them you need to have at least one Linux worker.

  You may want a few workers, depending on the resource usage of your
  pipeline. There should be one per machine; running multiple on one box
  doesn't really make sense, as each worker runs as many containers as
  Concourse requests of it.

  To spin up a worker and register it with your Concourse cluster running
  locally, run:

  \codeblock{bash}{{
  sudo concourse worker \\
    --work-dir /opt/concourse/worker \\
    --tsa-host 127.0.0.1 \\
    --tsa-public-key tsa_host_key.pub \\
    --tsa-worker-private-key worker_key
  }}

  Note that the worker must be run as \code{root}, as it orchestrates
  containers.

  The \code{--work-dir} flag specifies where container data should be placed;
  make sure it has plenty of disk space available, as it's where all the disk
  usage across your builds and resources will end up.

  The \code{--tsa-host} refers to wherever your TSA node is listening, by
  default on port \code{2222} (pass \code{--tsa-port} if you've configured it
  differently). This may be an address to a load balancer if you're running
  multiple \code{web} nodes, or just an IP, perhaps \code{127.0.0.1} if
  you're running everything on one box.

  The \code{--tsa-public-key} flag is used to ensure we're connecting to the
  TSA we should be connecting to, and is used like \code{known_hosts} with
  the \code{ssh} command. Refer to \reference{generating-keys} if you're not
  sure what this means.

  The \code{--tsa-worker-private-key} flag specifies the key to use when
  authenticating to the TSA. Refer to \reference{generating-keys} if you're
  not sure what this means.
}

