\title{Docker Repository}{docker-repository}

\use-plugin{concourse-docs}

The \reference{binaries}{standalone binary} is available in an official
Docker repository: \code{concourse/concourse}. There are tags for each
version, including release candidates if you want to live on the bleeding
edge.

For a quick start with \link{Docker
Compose}{https://docs.docker.com/compose/}, create \code{docker-compose.yml}:

\titled-codeblock{docker-compose.yml}{yaml}{{
version: '3'

services:
  concourse-db:
    image: postgres:9.6
    environment:
      POSTGRES_DB: concourse
      POSTGRES_USER: concourse
      POSTGRES_PASSWORD: changeme
      PGDATA: /database

  concourse-web:
    image: concourse/concourse
    links: [concourse-db]
    command: web
    depends_on: [concourse-db]
    ports: ["8080:8080"]
    volumes: ["./keys/web:/concourse-keys"]
    restart: unless-stopped # required so that it retries until concourse-db comes up
    environment:
      CONCOURSE_BASIC_AUTH_USERNAME: concourse
      CONCOURSE_BASIC_AUTH_PASSWORD: changeme
      CONCOURSE_EXTERNAL_URL: "$\{CONCOURSE_EXTERNAL_URL\}"
      CONCOURSE_POSTGRES_HOST: concourse-db
      CONCOURSE_POSTGRES_USER: concourse
      CONCOURSE_POSTGRES_PASSWORD: changeme
      CONCOURSE_POSTGRES_DATABASE: concourse

  concourse-worker:
    image: concourse/concourse
    privileged: true
    links: [concourse-web]
    depends_on: [concourse-web]
    command: worker
    volumes: ["./keys/worker:/concourse-keys"]
    environment:
      CONCOURSE_TSA_HOST: concourse-web
}}

Then, run the following to generate the necessary keys:

\codeblock{bash}{{
  mkdir -p keys/web keys/worker

  ssh-keygen -t rsa -f ./keys/web/tsa_host_key -N ''
  ssh-keygen -t rsa -f ./keys/web/session_signing_key -N ''

  ssh-keygen -t rsa -f ./keys/worker/worker_key -N ''

  cp ./keys/worker/worker_key.pub ./keys/web/authorized_worker_keys
  cp ./keys/web/tsa_host_key.pub ./keys/worker
}}

The next thing you'll need is an address that can be used to reach the
\code{web} node from within your network. This is the
\code{$CONCOURSE_EXTERNAL_URL} variable. It \italic{can't} be
\code{127.0.0.1} or \code{localhost} as it has to also work in a separate
network namespace, for \reference{fly-execute} to be able to receive your
uploaded bits from the \code{web} node.

If you're using \code{docker-machine}, set \code{CONCOURSE_EXTERNAL_URL} to
whatever the machine's IP is, for example:

\codeblock{bash}{{
  export CONCOURSE_EXTERNAL_URL=http://192.168.99.100:8080
}}

Then, spin everything up:

\codeblock{bash}{{
  docker-compose up
}}

Next, browse to your configured external URL (probably
\link{127.0.0.1:8080}{http://127.0.0.1:8080} or
\link{192.168.99.100:8080}{http://192.168.99.100:8080}) and log in with the
username \code{concourse} and password \code{changeme}.

Given that the Docker repository simply wraps the binary, you'll want to
reference \reference{binaries}{the binary documentation} or just run
\code{docker run concourse/concourse <command> --help} if you want to learn
how to do any further configuration.

Every flag can also be configured via environment variables in the form of
\code{CONCOURSE_(flag)}, where \code{(flag)} is the uppercased flag name with
all hyphens conveted to underscores. For example,
\code{--basic-auth-username} would be \code{CONCOURSE_BASIC_AUTH_USERNAME}.

In the above example we've configured basic auth for the
\reference{main-team}{\code{main} team}. For further configuration see
\reference{authentication}.
