\title{Credential Management}{creds}

\use-plugin{concourse-docs}

\warn{
  This topic isn't crucial to understanding Concourse; if you're just getting
  started and have finished the \reference{installing} section, you may want to
  first move on to \reference{using-concourse}.
}


Going beyond \reference{encryption}, explicit credential management will
provide credentials to your builds for a brief amount of time, without being
persisted anywhere. It also allows for credentials to be rotated and managed
external to the pipeline or team, and prevents them from being revealed by
\reference{fly-get-pipeline}.

Currently, the only supported credential manager is
\link{Vault}{https://vaultproject.io}, but more will come in the future.

Credential management works by replacing the credentials with
\reference{parameters} in your pipeline or task config. When the ATC is about
to run the step or \code{check} that is configured with the parameters, it will
resolve them by fetching the values from the credential manager. If the values
are not present, the action will error.

\section{
  \title{What can be parameterized?}

  The following configurations can be parameterized with a credential manager:

  \list{
    \reference{source} under \reference{configuring-resources} in a pipeline
  }{
    \reference{source} under \reference{configuring-resource-types} in a pipeline
  }{
    \reference{source} under \reference{image_resource} in a task config
  }{
    \reference{task-params} in a pipeline
  }{
    \reference{params} in a task config
  }

  Where these values are looked up and how the credential manager is configured
  depends on the backend. Consult the relevant section below for whichever
  backend you want to use.
}

\section{
  \title{Using Vault}{vault}

  \section{
    \title{Configuration}

    The ATC is statically configured with a Vault server URL (plus any TLS
    config), and either a client token or an auth backend.

    For example, to point the ATC at an internal Vault server with TLS signed
    by a local CA, using an
    \link{AppRole}{https://www.vaultproject.io/docs/auth/approle.html}
    auth backend, you may configure:

    \codeblock{bash}{{{
      concourse atc ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-auth-backend approle \
        --vault-auth-param role_id=db02de05-fa39-4855-059b-67221c5c2f63 \
        --vault-auth-param secret_id=6a174c20-f6de-a53c-74d2-6018fcceff64
    }}}

    You may instead want to use the
    \link{TLS}{https://www.vaultproject.io/docs/auth/cert.html} auth
    backend, in which case you would specify a client certificate and private
    key, like so:

    \codeblock{bash}{{{
      concourse atc ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-client-cert /etc/my-client.cert \
        --vault-client-key /etc/my-client.key \
        --vault-auth-backend cert
    }}}

    In this case no params are necessary, as the TLS auth backend will check
    the certificate against all roles if no name is specified.

    Alternatively, if you've got a \link{periodic
    token}{https://www.vaultproject.io/docs/concepts/tokens.html#periodic-tokens}
    created, you can pass it directly as \code{--vault-client-token}. Make sure
    the period is long enough to account for any ATC downtime, however,
    including the time between generating it and getting the ATC running.

    \codeblock{bash}{{{
      concourse atc ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-client-token c2c2fbd5-2893-b385-6fa5-30050439f698
    }}}

    For all of these configurations, the ATC will periodically renew its token,
    ensuring it doesn't expire.
  }

  \section{
    \title{Credential Lookup Rules}

    When resolving a parameter such as \code{((foo_param))}, it will look in
    the following paths, in order:

    \list{
      \code{
        /concourse/TEAM_NAME/PIPELINE_NAME/foo_param
      }
    }{
      \code{
        /concourse/TEAM_NAME/foo_param
      }
    }

    The leading \code{/concourse} can be changed by specifying
    \code{--vault-path-prefix}.

    Vault credentials are actually key-value, so for `((foo))` Concourse will
    default to the field name `value`. You can specify the field to grab via
    `.` syntax, e.g. `((foo.bar))`.

    If the action is being run in the context of a pipeline (e.g. a
    \code{check} or a step in a build of a job), the ATC will first look in the
    pipeline path. If it's not found there, it will look in the team path. This
    allows credentials to be scoped widely if they're common across many
    pipelines.

    If an action is being run in a one-off build, the ATC will only look in the
    team path.

    \section{
      \title{Caveat: multiple fields of a rotating key}

      When a key has multiple fields and is re-generated on every fetch, for
      example when using the \link{AWS secret
      backend}{https://www.vaultproject.io/docs/secrets/aws/index.html}, the
      ATC will currently fetch the credential once for each parameter,
      resulting in fields that don't match each other. This will be fixed in an
      upcoming release of Concourse.
    }
  }
}
