\title{The Fly CLI}{fly-cli}

\use-plugin{concourse-docs}

The \code{fly} tool is a command line interface to Concourse. It is used for
a number of tasks from connecting to a shell in one of your build's
containers to uploading new pipeline configuration into a running Concourse.
Learning how to use \code{fly} will make using Concourse faster and more
useful.

You can download \code{fly} from a Concourse. There are download links for
common platforms in the bottom right hand corner of the main page.

Throughout this section we'll stick to the long-form name of every command and
flag. Once you've learned what the commands do, you may want to consult
\code{fly -h} to learn the short forms.

\split-sections
\table-of-contents

\section{
  \title{\code{fly containers}}{fly-containers}

  To list the active containers across all your workers, run:

  \codeblock{bash}{{
  $ fly -t example containers
  }}

  This can be useful when discovering the containers available for
  \reference{fly-intercept}ing.
}

\section{
  \title{\code{fly workers}}{fly-workers}

  To list the currently registered workers, including additional metadata, run:

  \codeblock{bash}{{
  $ fly -t example workers
  }}

  This can be useful for monitoring the status of your workers, if you suspect
  that one keeps dropping out of the pool or getting tasked with too many
  containers, etc.
}

\section{
  \title{\code{fly prune-worker}}{fly-prune-worker}

  To remove a stalled, landing, landed, or retiring worker, run:

  \codeblock{bash}{{
  $ fly -t example prune-worker --worker worker-name
  }}

  This is for those cases where you know a worker is not coming back. Note that
  running workers cannot be pruned, since they'll just re-register themselves
  anyway.
}

\section{
  \title{\code{fly volumes}}{fly-volumes}

  To list the active volumes across all your workers, run:

  \codeblock{bash}{{
  $ fly -t example volumes
  }}

  This can be useful to observe the caches warming across your cluster, and
  could be a good indicator of disk use.
}

\section{
  \title{\code{fly checklist}}{fly-checklist}

  \link{Checkman}{https://github.com/cppforlife/checkman} supports
  retrieving build status from Concourse. If you would like to set this up
  yourself then there is documentation in the \link{Checkman
  README}{https://github.com/cppforlife/checkman#included-check-scripts} about
  the syntax required. However, \code{fly} can generate the
  Checkman files based on your pipelines using the command below.

  \codeblock{bash}{{
  $ fly -t example checklist --pipeline my-pipeline > ~/Checkman/my-pipeline
  }}
}
