#language anatomy

\use{\require{anatomy/atomy}}

\title{\code{ensure}\aux{: guarantee execution of a step}}{ensure-step}

Any step can have \code{ensure} tacked onto it, whose value is a second step to
execute regardless of the result of the parent step.

\define{ensure}{step}{
  The step to execute. Regardless of whether the parent step succeeds, fails,
  or errors, this step will be executed.

  If the parent step succeeds and the ensured step fails, the parent step is
  considered to have failed.
}

For example, the following build plan acquires a lock, and then \code{ensure}s
that the lock is released.

\codeblock{yaml}{
plan:
- put: some-lock
  params: {acquire: true}
- task: integration
  file: foo/integration.yml
  ensure:
    put: some-lock
    params: {release: some-lock}
}
