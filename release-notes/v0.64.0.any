#language anatomy

\title{v0.64.0}

\list{
  Caching!

  (In limited cases!)

  It's here! All you need to do to enable it is add the \code{baggageclaim} job
  to your workers. This caches resource versions so that if another task runs
  on that same worker then instead of downloading the resource again you'll get
  instant access to the cached copy. You do not need to change your pipeline or
  task configuration \italic{at all}.

  In the next few releases we'll improve caching by allowing it to be used in
  more places and by trying to ensure that we increase the percentage of cache
  hits wherever possible.

  If you're interested in how this all works then read on. If not, then feel
  free to skip this next bit.

  The first thing we did it write a new service called
  \hyperlink{https://github.com/concourse/baggageclaim}{\code{baggageclaim}}
  which handles volumes on the workers. Baggageclaim presents an API that lets
  a consumer create empty volumes or copy-on-write volumes which can sit on top
  of other volumes.

  The ATC can create new volumes similarly to the way that it can create new
  containers. When a new resource version needs to be fetched it creates a new
  empty volume, bind mounts it into the container that is performing the fetch,
  and tags it with metadata about the resource version it contains.

  When we go to get a resource version again we check to see if it's already
  sitting in a volume on the same worker and if so we can just create a new
  copy-on-write layer on top of the existing resource volume and give that to
  the task that requires it.
}{
  We no longer reuse the pending color for jobs that have no builds. A new
  darker shade of grey has been selected for your viewing pleasure.
}{
  We now emit metrics about how long each Concourse endpoint took to respond to
  a user. For more details see the
  \hyperlink{http://concourse.ci/metrics.html}{metrics documentation}. We're
  going to use these to inform a track of work to improve the latency of the
  Concourse API and web interface.
}{
  The \code{fly save-target} command now correctly ends its output with a
  newline.
}{
  We've switched to the official Go AWS library in the
  \hyperlink{https://github.com/concourse/s3-resource}{S3 resource} which uses
  the path style of specifying an S3 bucket rather than subdomains which will
  help with setting up custom S3 compatible blobstores.
}{
  The
  \hyperlink{https://github.com/concourse/archive-resource}{archive-resource}
  (which powers \code{fly execute}) will now follow redirects when fetching
  resources.
}
